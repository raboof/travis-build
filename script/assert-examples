#!/usr/bin/env bash
set -o errexit
set -o pipefail

main() {
  local e=0 ran=0
  local top
  top="$(git rev-parse --show-toplevel)"
  local fake_homedir="${top}/tmp/assert-examples-homedir"
  local fake_root="${top}/tmp/assert-examples-root"
  local examples_dir="${1:-${top}/examples}"
  local build_logs_dir="${top}/tmp/assert-examples-build-logs"

  cd "${top}"
  rm -rf "${build_logs_dir}"
  mkdir -p \
    "${fake_homedir}/.travis" \
    "${fake_root}" \
    "${build_logs_dir}" \
    "${examples_dir}"

  for f in $(__list_build_examples "${examples_dir}"); do
    echo >"${fake_homedir}/.travis/job_stages"
    __check_syntax "${f}" || e=$((e + 1))
    __check_evaluation "${f}" "${top}" "${fake_homedir}" "${fake_root}" ||
      e=$((e + 1))
    ran=$((ran + 1))
  done

  [[ "${ran}" -gt 0 ]]
  [[ "${e}" -eq 0 ]]

  if [[ "${INTEGRATION_SPECS}" != '1' ]]; then
    log 'Integration specs disabled'
    exit 0
  fi

  eval "$("${top}/script/handle-docker-config")"

  if ! docker version &>/dev/null; then
    log 'ERROR: no docker client found'
    exit 1
  fi

  local docker_image="${TRAVIS_BUILD_ASSERT_EXAMPLES_DOCKER_IMAGE}"
  if [[ ! "${docker_image}" ]]; then
    docker_image="$(curl -sSL https://git.io/fAwln | jq -r '.default')"
  fi

  chmod 0777 "${build_logs_dir}"

  ran=0
  e=0
  for f in $(__list_build_examples "${examples_dir}"); do
    __check_execution \
      "${f}" "${build_logs_dir}" "${examples_dir}" "${docker_image}" ||
      e=$((e + 1))
    ran=$((ran + 1))
  done

  [[ "${ran}" -gt 0 ]]
  [[ "${e}" -eq 0 ]]
}

log() {
  printf "assert-examples: %s\\n" "${*}" >&2
}

__list_build_examples() {
  find "${1}" -name 'build*.bash.txt' | while read -r f; do
    echo "${f}"
  done
}

__check_syntax() {
  local f="${1}"
  log "checking syntax of ${f}"
  "${SHFMT_EXE:-shfmt}" "${f}" &>/dev/null
}

__check_evaluation() {
  local f="${1}"
  local top="${2}"
  local fake_homedir="${3}"
  local fake_root="${4}"
  local stages_dest
  stages_dest="${top}/tmp/$(basename "${f%*.bash.txt}.stages.bash")"

  log "checking evaluation of ${f}"
  sed -e '1,/START_FUNCS/ d' "${f}" |
    sed -e '/END_FUNCS/,$ d' >"${stages_dest}"
  rm -rf "${fake_homedir}/.travis" "${fake_root}"
  mkdir -p "${fake_homedir}/.travis" "${fake_root}"
  bash -c "
    export TRAVIS_ROOT=${fake_root}
    export TRAVIS_HOME=${fake_homedir}
    export TRAVIS_BUILD_DIR=${fake_homedir}/build

    $(cat "${top}/lib/travis/build/bash/travis_whereami.bash")
    $(cat "${top}/lib/travis/build/bash/travis_setup_env.bash")
    travis_setup_env

    source ${stages_dest}
    if [[ -f ${fake_homedir}/.travis/job_stages ]]; then
      source ${fake_homedir}/.travis/job_stages
    fi
  "
}

__check_execution() {
  local f="${1}"
  local build_logs_dir="${2}"
  local examples_dir="${3}"
  local docker_image="${4}"
  local logdest cid

  if ! grep -q '^# TRAVIS-BUILD INTEGRATION EXAMPLE MAGIC COMMENT' "${f}"; then
    log "skipping execution of ${f}"
    return
  fi

  logdest="${build_logs_dir}/$(basename "${f}").log"
  rm -f "${logdest}"
  cid="$(docker run -d "${docker_image}" /sbin/init)"
  log "checking execution of ${f}"

  # shellcheck disable=SC2064
  trap "docker rm -f \"${cid}\" &>/dev/null" EXIT QUIT INT

  docker exec --user travis "${cid}" sudo mkdir -p /examples
  docker cp "${f}" "${cid}:/examples/$(basename "${f}")"
  docker exec --user travis "${cid}" \
    bash -c "
      echo >/var/tmp/build.log &&
        cp /examples/$(basename "${f}") ~/build.sh &&
        bash ~/build.sh 2>&1 | tee /var/tmp/build.log
    " &>"${logdest}"
}

main "${@}"
